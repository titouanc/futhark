-- ==
-- input { 8 4 3 }
-- output {
-- [[[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]],
--  [[0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32],
--   [0i32, 1i32, 2i32]]]
-- }

let main(n: i32, m: i32, l: i32): [][][]i32 =
  let a = replicate n (replicate m (iota l))
  in rotate@1 (-1) a
